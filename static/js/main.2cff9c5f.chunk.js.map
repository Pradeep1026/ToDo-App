{"version":3,"sources":["components/TodoItem.js","components/Todo.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","components/pages/contact/Map.js","components/pages/contact/ContactUs.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","inherits","createClass","key","value","_this$props$todo","id","title","react_default","a","createElement","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todo","map","components_TodoItem","Header","headerStyle","Link","to","navStyle","textAlign","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","defineProperty","target","name","display","flex","placeholder","className","About","Fragment","Map","ContactUs","App","currentToDo","axios","delete","then","res","toConsumableArray","filter","post","data","_this2","get","_this3","BrowserRouter","Route","exact","path","render","components_AddTodo","components_Todo","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0PAGaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAJ,IAAAe,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIQ,SAAW,WACP,MAAO,CACHC,WAAY,UACZC,QAAS,OACTC,aAAc,kBACdC,eAAgBnB,EAAKoB,MAAMC,KAAKC,UAAY,eAAiB,SANzEtB,EAAA,OAAAC,OAAAsB,EAAA,EAAAtB,CAAAJ,EAAAC,GAAAG,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAA,EAAA4B,IAAA,SAAAC,MAAA,WAUW,IAAAC,EACiBxB,KAAKiB,MAAMC,KAAzBO,EADHD,EACGC,GAAIC,EADPF,EACOE,MACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,MAAS9B,KAAKY,YACjBe,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,SAAOE,KAAO,WAAWC,SAAYhC,KAAKiB,MAAMgB,aAAaC,KAAKlC,KAAMyB,KAD5E,IAEQ,IACHC,EACDC,EAAAC,EAAAC,cAAA,UAAQC,MAASK,EAAUC,QAAWpC,KAAKiB,MAAMoB,QAAQH,KAAKlC,KAAMyB,IAApE,WAlBZ/B,EAAA,CAA8B4C,aAgCxBH,EAAW,CACbtB,WAAY,UACZ0B,MAAO,OACPC,OAAQ,OACR1B,QAAS,WACT2B,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGIjD,ICvBAkD,mLAhBJ,IAAA/C,EAAAG,KACP,OAAOA,KAAKiB,MAAMC,KAAK2B,IAAI,SAAA3B,GAAI,OAC3BS,EAAAC,EAAAC,cAACiB,EAAD,CAAUxB,IAAOJ,EAAKO,GAAIP,KAAQA,EAClCe,aAAgBpC,EAAKoB,MAAMgB,aAC3BI,QAAWxC,EAAKoB,MAAMoB,mBANXC,qBCDJ,SAASS,IACtB,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,MAASkB,GACZrB,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAK,IAAIpB,MAASqB,GAAxB,QAFF,MAEkDxB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAK,SAASpB,MAASqB,GAA7B,SAFlD,MAEwGxB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAMC,GAAK,WAAWpB,MAASqB,GAA/B,eAK5G,IAAMH,EAAc,CAChBnC,WAAY,OACZ0B,MAAO,OACPa,UAAW,SACXtC,QAAS,QAGPqC,EAAW,CACfZ,MAAO,OACTvB,eAAgB,gBCsBDqC,EAxCf,SAAA1D,GAAA,SAAA0D,IAAA,IAAAzD,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqD,GAAA,QAAApD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAT,EAAAC,OAAAS,EAAA,EAAAT,CAAAE,MAAAJ,EAAAE,OAAAU,EAAA,EAAAV,CAAAuD,IAAA5C,KAAAC,MAAAd,EAAA,CAAAI,MAAAW,OAAAP,MACIkD,MAAQ,CACJ5B,MAAO,IAFf7B,EAKI0D,SAAW,SAAAC,GACPA,EAAEC,iBACF5D,EAAKoB,MAAMyC,QAAQ7D,EAAKyD,MAAM5B,OAC9B7B,EAAK8D,SAAS,CAACjC,MAAO,MAR9B7B,EAWImC,SAAW,SAAAwB,GAAC,OAAI3D,EAAK8D,SAAL7D,OAAA8D,EAAA,EAAA9D,CAAA,GAAgB0D,EAAEK,OAAOC,KAAON,EAAEK,OAAOtC,SAX7D1B,EAAA,OAAAC,OAAAsB,EAAA,EAAAtB,CAAAuD,EAAA1D,GAAAG,OAAAuB,EAAA,EAAAvB,CAAAuD,EAAA,EAAA/B,IAAA,SAAAC,MAAA,WAeI,OACEI,EAAAC,EAAAC,cAAA,QAAM0B,SAAYvD,KAAKuD,SAAUzB,MAAS,CAACiC,QAAS,SAClDpC,EAAAC,EAAAC,cAAA,SACIE,KAAO,OACP+B,KAAO,QACPhC,MAAS,CAACkC,KAAM,KAAMlD,QAAS,OAC/BmD,YAAc,cACd1C,MAASvB,KAAKsD,MAAM5B,MACpBM,SAAYhC,KAAKgC,WAErBL,EAAAC,EAAAC,cAAA,SACIE,KAAO,SACP+B,KAAO,SACPhC,MAAS,CAACkC,KAAM,KAChBE,UAAY,aA7BxBb,EAAA,CAA6Bf,aCDd,SAAS6B,IACtB,OACExC,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,SAAP,KACEzC,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,6BCJS,SAASwC,IACtB,OACE1C,EAAAC,EAAAC,cAAA,wBCDW,SAASyC,IACpB,OACI3C,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,SAAP,KACIzC,EAAAC,EAAAC,cAACwC,EAAD,4BCgEGE,oNA1DbjB,MAAQ,CACNpC,KAAM,MASRe,aAAe,SAACR,GACd5B,EAAK8D,SAAS,CAAEzC,KAAMrB,EAAKyD,MAAMpC,KAAK2B,IAAI,SAAA2B,GAIxC,OAHGA,EAAY/C,KAAOA,IACpB+C,EAAYrD,WAAaqD,EAAYrD,WAEhCqD,SAKbnC,QAAU,SAACZ,GACTgD,IAAMC,OAAN,8CAAA/D,OAA2Dc,IACxDkD,KAAK,SAAAC,GAAG,OAAI/E,EAAK8D,SAAS,CAACzC,KAAKpB,OAAA+E,EAAA,EAAA/E,CAAKD,EAAKyD,MAAMpC,KAAK4D,OAAO,SAAAN,GAAW,OAAIA,EAAY/C,KAAOA,YAKnGiC,QAAU,SAAAhC,GACR+C,IAAMM,KAAK,6CAA8C,CACvDrD,QACAP,WAAW,IAEZwD,KAAK,SAAAC,GAAG,OAAI/E,EAAK8D,SAAS,CAACzC,KAAI,GAAAP,OAAAb,OAAA+E,EAAA,EAAA/E,CAAMD,EAAKyD,MAAMpC,MAAjB,CAAuB0D,EAAII,+FA5BvC,IAAAC,EAAAjF,KAClByE,IAAMS,IAAI,wDACTP,KAAK,SAAAC,GAAG,OAAIK,EAAKtB,SAAS,CAACzC,KAAM0D,EAAII,0CA4B/B,IAAAG,EAAAnF,KACP,OACE2B,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACEzD,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,OACbvC,EAAAC,EAAAC,cAAA,OAAKqC,UAAU,aACbvC,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAO,IAAIC,OAAU,SAAAvE,GAAK,OACrCU,EAAAC,EAAAC,cAACF,EAAAC,EAAMwC,SAAP,KACEzC,EAAAC,EAAAC,cAAC4D,EAAD,CAAS/B,QAAWyB,EAAKzB,UACzB/B,EAAAC,EAAAC,cAAC6D,EAAD,CAAMxE,KAAQiE,EAAK7B,MAAMpC,KACzBe,aAAgBkD,EAAKlD,aACrBI,QAAW8C,EAAK9C,cAIpBV,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAOE,KAAO,SAASI,UAAaxB,IACpCxC,EAAAC,EAAAC,cAACwD,EAAA,EAAD,CAAOE,KAAO,WAAWI,UAAarB,cAnDhChC,cCCEsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAAST,OAAO7D,EAAAC,EAAAC,cAACqE,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.2cff9c5f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        } \r\n    }\r\n\r\n  render() {\r\n      const { id, title } = this.props.todo;\r\n    return (\r\n      <div style = {this.getStyle()}>\r\n        <p>\r\n            <input type = 'checkbox' onChange = {this.props.markComplete.bind(this, id)}\r\n            /> {' '}\r\n            {title}\r\n            <button style = {btnStyle} onClick = {this.props.delTodo.bind(this, id)}>x</button>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodoItem.propTypes ={\r\n    todo: PropTypes.object.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    border: 'none',\r\n    padding: '5px, 9px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nexport default TodoItem\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todo extends Component {\r\n   \r\n  render() {\r\n    return this.props.todo.map(todo => (\r\n        <TodoItem key = {todo.id} todo = {todo} \r\n        markComplete = {this.props.markComplete}\r\n        delTodo = {this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\n// PropTypes\r\nTodo.propTypes ={\r\n    todo: PropTypes.array.isRequired,\r\n    markComplete: PropTypes.func.isRequired,\r\n    delTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default Todo;","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div style = {headerStyle}>\r\n      <h1>Todo App</h1>\r\n      <Link to = \"/\" style = {navStyle}>Home</Link> | <Link to = \"/about\" style = {navStyle}>About</Link> | <Link to = \"/contact\" style = {navStyle}>Contact Us</Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst headerStyle = {\r\n    background: '#333',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n}\r\n\r\nconst navStyle = {\r\n  color: '#fff',\r\ntextDecoration: 'none'\r\n}","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class AddTodo extends Component {\r\n    state = {\r\n        title: ''\r\n    }\r\n\r\n    onSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({title: ''});\r\n    }\r\n\r\n    onChange = e => this.setState({[e.target.name]: e.target.value});\r\n    \r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit = {this.onSubmit} style = {{display: 'flex'}}>\r\n        <input\r\n            type = \"text\"\r\n            name = \"title\"\r\n            style = {{flex: '10', padding: '5px'}}\r\n            placeholder = \"Add Todo...\"\r\n            value = {this.state.title}\r\n            onChange = {this.onChange}\r\n        />\r\n        <input\r\n            type = \"submit\"\r\n            name = \"Submit\"\r\n            style = {{flex: '1'}}\r\n            className = \"btn\"\r\n        />\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\n// PropTypes\r\nAddTodo.propTypes ={\r\n  addTodo: PropTypes.func.isRequired\r\n}\r\nexport default AddTodo\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>About</h1>\r\n      <p>hello I'm about</p>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Map() {\r\n  return (\r\n    <h1>Conatct Us</h1>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport Map from './Map'\r\n\r\nexport default function ContactUs() {\r\n    return(\r\n        <React.Fragment>\r\n            <Map />\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todo from './components/Todo';\nimport Header from './components/layout/Header';\nimport AddTodo from './components/AddTodo';\nimport About from './components/pages/About';\nimport ContactUs from './components/pages/contact/ContactUs';\n// import uuid from 'uuid';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todo: []\n  }\n\n  componentDidMount() {\n    axios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n    .then(res => this.setState({todo: res.data}));\n  }\n\n  //Mark Toggle Complete\n  markComplete = (id) => {\n    this.setState({ todo: this.state.todo.map(currentToDo => {\n      if(currentToDo.id === id) {\n        currentToDo.completed = !currentToDo.completed\n      }\n      return currentToDo;\n    }) });\n}\n\n//Delete Todo list\ndelTodo = (id) => {\n  axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n    .then(res => this.setState({todo: [...this.state.todo.filter(currentToDo => currentToDo.id !== id\n      )] }));\n}\n\n//Adding todo item\naddTodo = title => {\n  axios.post('https://jsonplaceholder.typicode.com/todos', {\n    title,\n    completed: false\n  })\n  .then(res => this.setState({todo: [...this.state.todo, res.data]}));\n}\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path = \"/\" render = {props => (\n              <React.Fragment>\n                <AddTodo addTodo = {this.addTodo}/>\n                <Todo todo = {this.state.todo}\n                markComplete = {this.markComplete}\n                delTodo = {this.delTodo}\n                />\n              </React.Fragment>\n            )}/>\n            <Route path = \"/about\" component = {About} />\n            <Route path = \"/contact\" component = {ContactUs} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}